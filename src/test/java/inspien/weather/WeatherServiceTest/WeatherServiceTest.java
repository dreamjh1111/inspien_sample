//package inspien.weather.WeatherServiceTest;
//
//import inspien.weather.Entity.WeatherData;
//import inspien.weather.Repository.WeatherDataRepository;
//import inspien.weather.Service.WeatherService;
//import inspien.weather.WeatherApplication;
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import org.junit.jupiter.api.extension.ExtendWith;
//import org.springframework.boot.test.context.SpringBootTest;
//import org.springframework.boot.test.mock.mockito.MockBean;
//import org.springframework.http.HttpMethod;
//import org.springframework.http.ResponseEntity;
//import org.springframework.test.context.junit.jupiter.SpringExtension;
//import org.springframework.web.client.RestTemplate;
//
//import java.util.HashMap;
//import java.util.Map;
//
//import static org.mockito.ArgumentMatchers.any;
//import static org.mockito.ArgumentMatchers.anyString;
//import static org.mockito.Mockito.*;
//
//@ExtendWith(SpringExtension.class)
//@SpringBootTest(classes = WeatherApplication.class)
//public class WeatherServiceTest {
//
//    @MockBean
//    private WeatherDataRepository weatherDataRepository;
//
//    @MockBean
//    private RestTemplate restTemplate;
//
//    private WeatherService weatherService;
//    private String apiKey = "your-openweatherapi-key";
//
//    @BeforeEach
//    public void setup() {
//        weatherService = new WeatherService(weatherDataRepository, apiKey, restTemplate);
//    }
//
//    //... 이전의 import문과 기존 코드는 그대로 유지합니다.
//
//    @Test
//    public void testSaveCurrentWeatherData() {
//        String city = "Seoul";
//        // 응답을 대표할 임의의 맵 생성
//        Map<String, Object> sampleResponse = new HashMap<>();
//        sampleResponse.put("key", "value");
//
//        // restTemplate를 목으로 대체하고, 예상되는 응답을 받도록 설정
//        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(), any(Class.class)))
//                .thenReturn(ResponseEntity.ok(sampleResponse));
//
//        // repository를 목으로 대체하고, 저장 동작을 수행하면 반환값을 설정
//        when(weatherDataRepository.save(any(WeatherData.class))).thenAnswer(invocation -> {
//            WeatherData wd = invocation.getArgument(0, WeatherData.class);
//            // Simulate setId method if you are using autogenerated Id.
//            // wd.setId(1L);
//            return wd;
//        });
//
//        // saveCurrentWeatherData를 호출하여 테스트
//        weatherService.getCurrentWeatherData(city);
//
//        // restTemplate 및 repository가 한 번씩 사용되는지 확인
//        verify(restTemplate, times(1)).exchange(anyString(), any(HttpMethod.class), any(), any(Class.class));
//        verify(weatherDataRepository, times(1)).save(any(WeatherData.class));
//    }
//
//}
